{"version":3,"sources":["api.service.js"],"names":["angular","module","service","$q","buildUrl","url","parameters","qs","key","value","encodeURIComponent","length","substring","tmpl","data","replace","match","position","out","this","options","accessToken","getHeaders","content-type","authorization","methods","on","cb","io","socket","model","isConnected","resolve","reject","request","query","opts","headers","_","merge","console","log","then","res","statusCode","error","find","params","method","findOne","create","update","remove","models","Document","Integration","List","Passport","Project","Service","Story","User","m","assign"],"mappings":"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","file":"angular-specerator.min.js","sourcesContent":["// angular.module('specerator').value('API_ENDPOINT', io.sails.url);\n\nangular.module('specerator.data', []).service('socketApiService', function($q){\n\n  this.options = {\n    accessToken: null\n  }\n\n  this.getHeaders = function() {\n    return  {\n      \"content-type\": \"application/json\",\n      authorization: 'Bearer ' + this.options.accessToken\n    };\n  }\n\n  // this.request = function(opts) {\n  //   opts = opts || {};\n  //   opts.headers = _.merge(this.getHeaders(), opts.headers);\n  //   return $q(function(resolve, reject){\n  //     io.socket.request(opts, function(data, res){\n  //       if (res.statusCode >= 200 && res.statusCode <= 299) {\n  //         return resolve(data);\n  //       }\n  //       if (res.statusCode >= 400 && res.statusCode <= 599) {\n  //         return reject(res.error);\n  //       }\n  //     });\n  //   })\n  // };\n\n  function buildUrl(url, parameters){\n    var qs = \"\";\n    for(var key in parameters) {\n      var value = parameters[key];\n      qs += encodeURIComponent(key) + \"=\" + encodeURIComponent(value) + \"&\";\n    }\n    if (qs.length > 0){\n      qs = qs.substring(0, qs.length-1); //chop off last \"&\"\n      url = url + \"?\" + qs;\n    }\n    return url;\n  }\n\n  function tmpl(url, data) {\n    return url.replace(/{{\\s*?(\\w*)\\s*?}}/g, function(match, key, position) {\n      if (typeof data[key] == 'undefined') {\n        return '';\n      } else {\n        var out = data[key];\n        delete data[key];\n        return out;\n      }\n    });\n  }\n\n  var methods = {\n    on: function(cb) {\n      io.socket.on(this.model, cb);\n    },\n    isConnected: function() {\n      return new $q(function(resolve, reject){\n        if (io.socket.isConnected) {\n          return resolve(true);\n        }\n        io.socket.on('connect', function(){\n          return resolve(true);\n        });\n      });\n    },\n    request: function(query, data, opts) {\n      query = query || {};\n      opts.data = data || {};\n      opts.url = tmpl(opts.url, query);\n      if (query) {\n        opts.url = buildUrl(opts.url, query);\n      }\n      opts.headers = _.merge(this.getHeaders(), opts.headers);\n      console.log(opts);\n      return this.isConnected().then(function(){\n        return $q(function(resolve, reject){\n          io.socket.request(opts, function(data, res){\n            if (res.statusCode >= 200 && res.statusCode <= 299) {\n              return resolve(data);\n            }\n            if (res.statusCode >= 400 && res.statusCode <= 599) {\n              return reject(res.error);\n            }\n          });\n        })\n      });\n    },\n    find: function(query, opts) {\n      options = {};\n      options.params = opts;\n      options.method = 'GET';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, {}, options);\n    },\n    findOne: function(query, opts) {\n      options = {};\n      options.params = opts;\n      options.method = 'GET';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, {}, options);\n    },\n    create: function(query, data, opts) {\n      options = opts || {};\n      options.method = 'POST';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, data, options);\n    },\n    update: function(query, data, opts) {\n      options = opts || {};\n      options.method = 'PUT';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, data, options);\n    },\n    remove: function(query, opts) {\n      options = opts || {};\n      options.method = 'DELETE';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, {}, options);\n    }\n  }\n\n  var models = {\n    Document: {\n      model: 'document',\n      url: '/projects/{{project}}/documents/{{document}}'\n    },\n    Integration: {\n      model: 'integration',\n      url: '/projects/{{project}}/integrations/{{integration}}'\n    },\n    List: {\n      model: 'list',\n      url: '/projects/{{project}}/lists/{{list}}'\n    },\n    Passport: {\n        model: 'passport',\n        url: '/passports/{{passport}}'\n    },\n    Project: {\n      model: 'project',\n      url: '/projects/{{project}}'\n    },\n    Service: {\n      model: 'service',\n      url: '/services/{{service}}'\n    },\n    Story: {\n      model: 'story',\n      url: '/projects/{{project}}/stories/{{story}}'\n    },\n    User: {\n      model: 'user',\n      url: '/users/{{user}}'\n    }\n  };\n\n  for (m in models) {\n    this[m] = _.assign(models[m], this, methods);\n  }\n\n  return this;\n\n});\n\n// angular.module('specerator').factory('Api', ['$resource', 'API_ENDPOINT',\n//     function($resource, API_ENDPOINT) {\n//         return {\n//             Document: $resource(API_ENDPOINT + '/projects/:project/documents/:id', {\n//                 project: '@project',\n//                 id: '@id'\n//             }),\n//             Integration: $resource(API_ENDPOINT + '/projects/:project/integrations/:id', {\n//                 project: '@project',\n//                 id: '@id'\n//             }),\n//             Project: $resource(API_ENDPOINT + '/projects/:id', {\n//                 id: '@id'\n//             }, {\n//                 report: {\n//                     method: 'GET',\n//                     params: {\n//                         id: 'report'\n//                     },\n//                     isArray: true\n//                 }\n//             }),\n//             Story: $resource(API_ENDPOINT + '/projects/:project/stories/:id', {\n//                 project: '@project',\n//                 id: '@id'\n//             }, {\n//                 update: {\n//                     method: 'PUT',\n//                     params: {\n//                         param1: '@id'\n//                     }\n//                 }\n//             }),\n//         }\n//     }\n// ]);\n"],"sourceRoot":"/source/"}