{"version":3,"sources":["api.service.js"],"names":["angular","module","service","$q","buildUrl","url","parameters","qs","key","value","encodeURIComponent","length","substring","tmpl","data","replace","match","position","out","this","options","accessToken","getHeaders","content-type","authorization","isConnected","resolve","reject","io","socket","on","request","opts","headers","_","merge","then","res","statusCode","error","methods","cb","model","query","console","log","find","params","method","findOne","create","update","remove","models","Document","Integration","List","Passport","Project","Service","Story","sync","User","m","assign","factory","$resource","API_ENDPOINT","project","id","report","isArray","param1"],"mappings":"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","file":"angular-specerator.min.js","sourcesContent":["// angular.module('specerator').value('API_ENDPOINT', io.sails.url);\n\nangular.module('specerator.data', []).service('socketApiService', function($q){\n\n  this.options = {\n    accessToken: null\n  }\n\n  this.getHeaders = function() {\n    return  {\n      \"content-type\": \"application/json\",\n      authorization: 'Bearer ' + this.options.accessToken\n    };\n  }\n\n  this.isConnected = function() {\n    return new $q(function(resolve, reject){\n      if (io.socket.isConnected) {\n        return resolve(true);\n      }\n      io.socket.on('connect', function(){\n        return resolve(true);\n      });\n    });\n  };\n\n  this.request = function(opts) {\n    opts.headers = _.merge(this.getHeaders(), opts.headers);\n    return this.isConnected().then(function(){\n      return $q(function(resolve, reject){\n        io.socket.request(opts, function(data, res){\n          if (res.statusCode >= 200 && res.statusCode <= 299) {\n            return resolve(data);\n          }\n          if (res.statusCode >= 400 && res.statusCode <= 599) {\n            return reject(res.error);\n          }\n        });\n      })\n    });\n  };\n\n  function buildUrl(url, parameters){\n    var qs = \"\";\n    for(var key in parameters) {\n      var value = parameters[key];\n      qs += encodeURIComponent(key) + \"=\" + encodeURIComponent(value) + \"&\";\n    }\n    if (qs.length > 0){\n      qs = qs.substring(0, qs.length-1); //chop off last \"&\"\n      url = url + \"?\" + qs;\n    }\n    return url;\n  }\n\n  function tmpl(url, data) {\n    return url.replace(/{{\\s*?(\\w*)\\s*?}}/g, function(match, key, position) {\n      if (typeof data[key] == 'undefined') {\n        return '';\n      } else {\n        var out = data[key];\n        delete data[key];\n        return out;\n      }\n    });\n  }\n\n  var methods = {\n    on: function(cb) {\n      io.socket.on(this.model, cb);\n    },\n    request: function(query, data, opts) {\n      query = query || {};\n      opts.data = data || {};\n      opts.url = tmpl(opts.url, query);\n      if (query) {\n        opts.url = buildUrl(opts.url, query);\n      }\n      opts.headers = _.merge(this.getHeaders(), opts.headers);\n      console.log(opts);\n      return this.isConnected().then(function(){\n        return $q(function(resolve, reject){\n          io.socket.request(opts, function(data, res){\n            if (res.statusCode >= 200 && res.statusCode <= 299) {\n              return resolve(data);\n            }\n            if (res.statusCode >= 400 && res.statusCode <= 599) {\n              return reject(res.error);\n            }\n          });\n        })\n      });\n    },\n    find: function(query, opts) {\n      options = {};\n      options.params = opts;\n      options.method = 'GET';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, {}, options);\n    },\n    findOne: function(query, opts) {\n      options = {};\n      options.params = opts;\n      options.method = 'GET';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, {}, options);\n    },\n    create: function(query, data, opts) {\n      options = opts || {};\n      options.method = 'POST';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, data, options);\n    },\n    update: function(query, data, opts) {\n      options = opts || {};\n      options.method = 'PUT';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, data, options);\n    },\n    remove: function(query, opts) {\n      options = opts || {};\n      options.method = 'DELETE';\n      options.url = this.url;\n      options.model = this.model;\n      return this.request(query, {}, options);\n    }\n  }\n\n  var models = {\n    Document: {\n      model: 'document',\n      url: '/projects/{{project}}/documents/{{document}}'\n    },\n    Integration: {\n      model: 'integration',\n      url: '/projects/{{project}}/integrations/{{integration}}'\n    },\n    List: {\n      model: 'list',\n      url: '/projects/{{project}}/lists/{{list}}'\n    },\n    Passport: {\n        model: 'passport',\n        url: '/passports/{{passport}}'\n    },\n    Project: {\n      model: 'project',\n      url: '/projects/{{project}}'\n    },\n    Service: {\n      model: 'service',\n      url: '/services/{{service}}'\n    },\n    Story: {\n      model: 'story',\n      url: '/projects/{{project}}/stories/{{story}}',\n      sync: function(query, opts) {\n        options = {};\n        options.params = opts;\n        options.method = 'GET';\n        options.url = '/projects/{{project}}/stories/sync';\n        return this.request(query, {}, options);\n      }\n    },\n    User: {\n      model: 'user',\n      url: '/users/{{user}}'\n    }\n  };\n\n  for (m in models) {\n    this[m] = _.assign(models[m], this, methods);\n  }\n\n  return this;\n\n});\n\nangular.module('specerator').factory('Api', ['$resource', 'API_ENDPOINT',\n    function($resource, API_ENDPOINT) {\n        return {\n            Document: $resource(API_ENDPOINT + '/projects/:project/documents/:id', {\n                project: '@project',\n                id: '@id'\n            }),\n            Integration: $resource(API_ENDPOINT + '/projects/:project/integrations/:id', {\n                project: '@project',\n                id: '@id'\n            }),\n            Project: $resource(API_ENDPOINT + '/projects/:id', {\n                id: '@id'\n            }, {\n                report: {\n                    method: 'GET',\n                    params: {\n                        id: 'report'\n                    },\n                    isArray: true\n                }\n            }),\n            Story: $resource(API_ENDPOINT + '/projects/:project/stories/:id', {\n                project: '@project',\n                id: '@id'\n            }, {\n                update: {\n                    method: 'PUT',\n                    params: {\n                        param1: '@id'\n                    }\n                }\n            }),\n        }\n    }\n]);\n"],"sourceRoot":"/source/"}